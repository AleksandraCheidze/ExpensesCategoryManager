import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import spark.Spark;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import static spark.Spark.*;

public class ExpenseAPI {
    private final BudgetApp budgetApp;
    private final ExpenseCategoryManager categoryManager;
    private final List<Expense> expenses;
    private final Gson gson;

    public ExpenseAPI(BudgetApp budgetApp) {
        this.budgetApp = budgetApp;
        this.categoryManager = budgetApp.categoryManager;
        this.expenses = budgetApp.expenses;
        this.gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();

        setupRoutes();
    }

    private void setupRoutes() {
        // Configure Spark
        port(8080);
        staticFiles.externalLocation("Expenses/standalone-web");

        // Enable debug mode
        Spark.exception(Exception.class, (exception, request, response) -> {
            exception.printStackTrace();
        });

        // Enable CORS
        options("/*", (request, response) -> {
            String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
            if (accessControlRequestHeaders != null) {
                response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
            }

            String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
            if (accessControlRequestMethod != null) {
                response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
            }

            return "OK";
        });

        before((request, response) -> {
            response.header("Access-Control-Allow-Origin", "*");
            response.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
            response.header("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With, Content-Length, Accept, Origin");
            response.type("application/json");
        });

        // Define API endpoints

        // Get all expenses
        get("/api/expenses", (request, response) -> {
            // Convert expenses to a format that can be easily serialized
            List<Map<String, Object>> expensesList = new ArrayList<>();
            for (Expense expense : expenses) {
                Map<String, Object> expenseMap = new HashMap<>();
                expenseMap.put("category", expense.getCategory());
                expenseMap.put("amount", expense.getAmount());
                expenseMap.put("date", expense.getDate());
                expensesList.add(expenseMap);
            }
            return expensesList;
        }, gson::toJson);

        // Add a new expense
        post("/api/expenses", (request, response) -> {
            ExpenseRequest expenseRequest = gson.fromJson(request.body(), ExpenseRequest.class);

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date date;
            try {
                date = dateFormat.parse(expenseRequest.getDate());
            } catch (ParseException e) {
                response.status(400);
                return new ApiResponse(false, "Invalid date format");
            }

            SimpleDateFormat outputFormat = new SimpleDateFormat("dd.MM.yyyy");
            String formattedDate = outputFormat.format(date);

            Expense expense = new Expense(expenseRequest.getCategory(), expenseRequest.getAmount(), formattedDate);
            expenses.add(expense);

            // Save expenses to file
            Expense.saveExpensesToFile(expenses, "res/expenses.txt");

            return new ApiResponse(true, "Expense added successfully");
        }, gson::toJson);

        // Get all categories
        get("/api/categories", (request, response) -> {
            return categoryManager.getCategories();
        }, gson::toJson);

        // Add a new category
        post("/api/categories", (request, response) -> {
            CategoryRequest categoryRequest = gson.fromJson(request.body(), CategoryRequest.class);
            categoryManager.addCategory(categoryRequest.getCategory());
            return new ApiResponse(true, "Category added successfully");
        }, gson::toJson);

        // Delete a category
        delete("/api/categories/:category", (request, response) -> {
            String category = request.params(":category");
            categoryManager.removeCategory(category);
            return new ApiResponse(true, "Category deleted successfully");
        }, gson::toJson);

        // Generate a report
        post("/api/reports", (request, response) -> {
            ReportRequest reportRequest = gson.fromJson(request.body(), ReportRequest.class);
            ExpenseReportGenerator reportGenerator = new ExpenseReportGenerator(expenses);

            if ("category".equals(reportRequest.getType())) {
                return generateCategoryReport(reportRequest, reportGenerator);
            } else if ("month-comparison".equals(reportRequest.getType())) {
                return generateMonthComparisonReport(reportGenerator);
            } else if ("year-comparison".equals(reportRequest.getType())) {
                return generateYearComparisonReport(reportGenerator);
            } else {
                response.status(400);
                return new ApiResponse(false, "Invalid report type");
            }
        }, gson::toJson);
    }

    private Object generateCategoryReport(ReportRequest reportRequest, ExpenseReportGenerator reportGenerator) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate;
        Date endDate;

        try {
            startDate = dateFormat.parse(reportRequest.getStartDate());
            endDate = dateFormat.parse(reportRequest.getEndDate());
        } catch (ParseException e) {
            return new ApiResponse(false, "Invalid date format");
        }

        // Get expenses for the category and date range
        List<Expense> filteredExpenses = new ArrayList<>();
        SimpleDateFormat expenseDateFormat = new SimpleDateFormat("dd.MM.yyyy");

        for (Expense expense : expenses) {
            try {
                Date expenseDate = expenseDateFormat.parse(expense.getDate());
                String category = expense.getCategory();

                if ((reportRequest.getCategory().equals("all") || category.equals(reportRequest.getCategory())) &&
                    expenseDate.compareTo(startDate) >= 0 && expenseDate.compareTo(endDate) <= 0) {
                    filteredExpenses.add(expense);
                }
            } catch (ParseException e) {
                // Skip expenses with invalid dates
            }
        }

        // Group expenses by month
        Map<String, Double> expensesByMonth = new HashMap<>();
        Calendar cal = Calendar.getInstance();

        for (Expense expense : filteredExpenses) {
            try {
                Date expenseDate = expenseDateFormat.parse(expense.getDate());
                cal.setTime(expenseDate);
                String month = new SimpleDateFormat("MMM").format(cal.getTime());

                expensesByMonth.put(month, expensesByMonth.getOrDefault(month, 0.0) + expense.getAmount());
            } catch (ParseException e) {
                // Skip expenses with invalid dates
            }
        }

        // Calculate total
        double total = filteredExpenses.stream().mapToDouble(Expense::getAmount).sum();

        // Create report
        CategoryReport report = new CategoryReport();
        report.setType("category");
        report.setCategory(reportRequest.getCategory());
        report.setStartDate(reportRequest.getStartDate());
        report.setEndDate(reportRequest.getEndDate());
        report.setLabels(new ArrayList<>(expensesByMonth.keySet()));
        report.setValues(new ArrayList<>(expensesByMonth.values()));
        report.setTotal(total);

        return report;
    }

    private Object generateMonthComparisonReport(ExpenseReportGenerator reportGenerator) {
        // Get current and previous month
        Calendar currentMonth = Calendar.getInstance();
        currentMonth.set(Calendar.DAY_OF_MONTH, 1);

        Calendar previousMonth = Calendar.getInstance();
        previousMonth.add(Calendar.MONTH, -1);
        previousMonth.set(Calendar.DAY_OF_MONTH, 1);

        // Calculate totals
        double currentTotal = reportGenerator.getTotalExpensesInMonth(currentMonth);
        double previousTotal = reportGenerator.getTotalExpensesInMonth(previousMonth);

        // Calculate difference and percentage change
        double difference = currentTotal - previousTotal;
        double percentageChange = previousTotal == 0 ? 0 : (difference / previousTotal) * 100;

        // Create report
        MonthComparisonReport report = new MonthComparisonReport();
        report.setType("month-comparison");
        report.setCurrentMonth(new SimpleDateFormat("MMMM yyyy").format(currentMonth.getTime()));
        report.setPreviousMonth(new SimpleDateFormat("MMMM yyyy").format(previousMonth.getTime()));
        report.setLabels(Arrays.asList("Current Month", "Previous Month"));
        report.setValues(Arrays.asList(currentTotal, previousTotal));
        report.setCurrentTotal(currentTotal);
        report.setPreviousTotal(previousTotal);
        report.setDifference(difference);
        report.setPercentageChange(percentageChange);

        return report;
    }

    private Object generateYearComparisonReport(ExpenseReportGenerator reportGenerator) {
        // Get current and previous year
        Calendar cal = Calendar.getInstance();
        int currentYear = cal.get(Calendar.YEAR);
        int previousYear = currentYear - 1;

        // Calculate totals
        double currentTotal = reportGenerator.getTotalExpensesForYear(currentYear);
        double previousTotal = reportGenerator.getTotalExpensesForYear(previousYear);

        // Calculate difference and percentage change
        double difference = currentTotal - previousTotal;
        double percentageChange = previousTotal == 0 ? 0 : (difference / previousTotal) * 100;

        // Create report
        YearComparisonReport report = new YearComparisonReport();
        report.setType("year-comparison");
        report.setCurrentYear(String.valueOf(currentYear));
        report.setPreviousYear(String.valueOf(previousYear));
        report.setLabels(Arrays.asList("Current Year", "Previous Year"));
        report.setValues(Arrays.asList(currentTotal, previousTotal));
        report.setCurrentTotal(currentTotal);
        report.setPreviousTotal(previousTotal);
        report.setDifference(difference);
        report.setPercentageChange(percentageChange);

        return report;
    }

    // Helper classes for request/response

    static class ExpenseRequest {
        private String category;
        private double amount;
        private String date;

        public String getCategory() {
            return category;
        }

        public double getAmount() {
            return amount;
        }

        public String getDate() {
            return date;
        }
    }

    static class CategoryRequest {
        private String category;

        public String getCategory() {
            return category;
        }
    }

    static class ReportRequest {
        private String type;
        private String category;
        private String startDate;
        private String endDate;

        public String getType() {
            return type;
        }

        public String getCategory() {
            return category;
        }

        public String getStartDate() {
            return startDate;
        }

        public String getEndDate() {
            return endDate;
        }
    }

    static class ApiResponse {
        private boolean success;
        private String message;

        public ApiResponse(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public boolean isSuccess() {
            return success;
        }

        public String getMessage() {
            return message;
        }
    }

    static class CategoryReport {
        private String type;
        private String category;
        private String startDate;
        private String endDate;
        private List<String> labels;
        private List<Double> values;
        private double total;

        public void setType(String type) {
            this.type = type;
        }

        public void setCategory(String category) {
            this.category = category;
        }

        public void setStartDate(String startDate) {
            this.startDate = startDate;
        }

        public void setEndDate(String endDate) {
            this.endDate = endDate;
        }

        public void setLabels(List<String> labels) {
            this.labels = labels;
        }

        public void setValues(List<Double> values) {
            this.values = values;
        }

        public void setTotal(double total) {
            this.total = total;
        }
    }

    static class MonthComparisonReport {
        private String type;
        private String currentMonth;
        private String previousMonth;
        private List<String> labels;
        private List<Double> values;
        private double currentTotal;
        private double previousTotal;
        private double difference;
        private double percentageChange;

        public void setType(String type) {
            this.type = type;
        }

        public void setCurrentMonth(String currentMonth) {
            this.currentMonth = currentMonth;
        }

        public void setPreviousMonth(String previousMonth) {
            this.previousMonth = previousMonth;
        }

        public void setLabels(List<String> labels) {
            this.labels = labels;
        }

        public void setValues(List<Double> values) {
            this.values = values;
        }

        public void setCurrentTotal(double currentTotal) {
            this.currentTotal = currentTotal;
        }

        public void setPreviousTotal(double previousTotal) {
            this.previousTotal = previousTotal;
        }

        public void setDifference(double difference) {
            this.difference = difference;
        }

        public void setPercentageChange(double percentageChange) {
            this.percentageChange = percentageChange;
        }
    }

    static class YearComparisonReport {
        private String type;
        private String currentYear;
        private String previousYear;
        private List<String> labels;
        private List<Double> values;
        private double currentTotal;
        private double previousTotal;
        private double difference;
        private double percentageChange;

        public void setType(String type) {
            this.type = type;
        }

        public void setCurrentYear(String currentYear) {
            this.currentYear = currentYear;
        }

        public void setPreviousYear(String previousYear) {
            this.previousYear = previousYear;
        }

        public void setLabels(List<String> labels) {
            this.labels = labels;
        }

        public void setValues(List<Double> values) {
            this.values = values;
        }

        public void setCurrentTotal(double currentTotal) {
            this.currentTotal = currentTotal;
        }

        public void setPreviousTotal(double previousTotal) {
            this.previousTotal = previousTotal;
        }

        public void setDifference(double difference) {
            this.difference = difference;
        }

        public void setPercentageChange(double percentageChange) {
            this.percentageChange = percentageChange;
        }
    }
}
